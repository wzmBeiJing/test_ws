/*
 * Copyright (c) 2011-2014, fortiss GmbH.
 * Licensed under the Apache License, Version 2.0.
 *
 * Use, modification and distribution are subject to the terms specified
 * in the accompanying license file LICENSE.txt located at the root directory
 * of this software distribution. A copy is available at
 * http://chromosome.fortiss.org/.
 *
 * This file is part of CHROMOSOME.
 *
 * $Id: plugAndPlayClientComponentWrapper.h 7837 2014-03-14 12:33:13Z wiesmueller $
 */

/**
 * \file
 *         Component wrapper - implements interface of a component
 *              to the data handler
 *
 * \author
 *         This file has been generated by the CHROMOSOME Modeling Tool (XMT)
 *         (fortiss GmbH).
 */

#ifndef XME_CORE_PNP_PNPCLIENTCOMPONENTWRAPPER_H
#define XME_CORE_PNP_PNPCLIENTCOMPONENTWRAPPER_H

/******************************************************************************/
/***   Includes                                                             ***/
/******************************************************************************/
#include "xme/core/executionManager/include/executionManagerDataStructures.h"

#include "xme/core/topicData.h"

/******************************************************************************/
/***   Type definitions                                                     ***/
/******************************************************************************/

/**
 * \enum xme_core_pnp_pnpClientComponentWrapper_internalFunctionId_e
 *
 * \brief Values for identifying functions of pnpClient component.
 */
enum xme_core_pnp_pnpClientComponentWrapper_internalFunctionId_e
{
    XME_CORE_PNP_PNPCLIENTCOMPONENTWRAPPER_FUNCTION_PNPCLIENTSENDMANIFEST = 0, ///< Function 'pnpClientSendManifest'
    XME_CORE_PNP_PNPCLIENTCOMPONENTWRAPPER_FUNCTION_PNPCLIENTPROCESSGRAPH = 1, ///< Function 'pnpClientProcessGraph'
    XME_CORE_PNP_PNPCLIENTCOMPONENTWRAPPER_FUNCTION_PNPCLIENTSENDLOGOUTREQUEST = 2, ///< Function 'pnpClientSendLogoutRequest'
    XME_CORE_PNP_PNPCLIENTCOMPONENTWRAPPER_FUNCTION_PNPCLIENTSENDREMOVECOMPONENTREQUEST = 3  ///< Function 'pnpClientSendRemoveComponentRequest'
};

/**
 * \enum xme_core_pnp_pnpClientComponentWrapper_internalPortId_e
 *
 * \brief Values for xme_core_pnp_pnpClientComponentWrapper_internalPortId_t.
 */
enum xme_core_pnp_pnpClientComponentWrapper_internalPortId_e
{
    XME_CORE_PNP_PNPCLIENTCOMPONENTWRAPPER_PORT_INLOGINACKNOWLEDGMENT = 0, ///< Port 'inLoginAcknowledgment'
    XME_CORE_PNP_PNPCLIENTCOMPONENTWRAPPER_PORT_INGRAPH = 1, ///< Port 'inGraph'
    XME_CORE_PNP_PNPCLIENTCOMPONENTWRAPPER_PORT_OUTMANIFEST = 2, ///< Port 'outManifest'
    XME_CORE_PNP_PNPCLIENTCOMPONENTWRAPPER_PORT_OUTLOGOUTACKNOWLEDGMENT = 3, ///< Port 'outLogoutAcknowledgment'
    XME_CORE_PNP_PNPCLIENTCOMPONENTWRAPPER_PORT_OUTLOGOUTREQUEST = 4, ///< Port 'outLogoutRequest'
    XME_CORE_PNP_PNPCLIENTCOMPONENTWRAPPER_PORT_OUTREMOVECOMPONENTREQUEST = 5  ///< Port 'outRemoveComponentRequest'
};

/**
 * \typedef xme_core_pnp_pnpClientComponentWrapper_internalPortId_t
 *
 * \brief Defines internal port ids of component 'pnpClient'.
 *
 * \details These can be used when calling the xme_core_pnp_pnpClientComponentWrapper_receivePort function.
 *          For the definition of possible values, see enum xme_core_pnp_pnpClientComponentWrapper_internalPortId_e.
 */
typedef uint8_t xme_core_pnp_pnpClientComponentWrapper_internalPortId_t;

/******************************************************************************/
/***   Prototypes                                                           ***/
/******************************************************************************/
XME_EXTERN_C_BEGIN

/**
 * \brief Initializes this component wrapper.
 *
 * \retval XME_STATUS_SUCCESS on success.
 */
xme_status_t
xme_core_pnp_pnpClientComponentWrapper_init(void);

/**
 * \brief Finalizes this component wrapper.
 */
void
xme_core_pnp_pnpClientComponentWrapper_fini(void);

/**
 * \brief Associate an internal port number with the corresponding port handle.
 *        For the ids of the individual ports, see the definition of xme_core_pnp_pnpClientComponentWrapper_internalPortId_t.
 *
 * \param dataPacketId Port handle from the dataHandler.
 * \param componentInternalPortId Component internal port number of the above port.
 *
 * \retval XME_STATUS_SUCCESS if no problems occurred.
 * \retval XME_STATUS_INVALID_PARAMETER if componentInternalPortId is unknown.
 */
xme_status_t
xme_core_pnp_pnpClientComponentWrapper_receivePort
(
    xme_core_dataManager_dataPacketId_t dataPacketId,
    xme_core_pnp_pnpClientComponentWrapper_internalPortId_t componentInternalPortId
);

/**
 * \brief This function is called by the function wrapper after the step
 *        function has been called. It signals to the middleware that all
 *        input ports have been read.
 */
void
xme_core_pnp_pnpClientComponentWrapper_completeReadOperations(void);

/**
 * \brief This function is called by the function wrapper after the step
 *        function has been called. It signals to the middleware that all
 *        write operations on ports that actually have been written to
 *        in the step function (via the functions in this component wrapper)
 *        are now completed.
 */
void
xme_core_pnp_pnpClientComponentWrapper_completeWriteOperations(void);

/**
 * \brief Read data from port 'inLoginAcknowledgment'.
 *
 * \param[out] data User provided storage, to which the data is copied.
 *
 * \retval XME_STATUS_SUCCESS if reading was successful.
 * \retval XME_STATUS_NO_SUCH_VALUE when there is now new data on this port
 *         (only possible when this port is an optional port of the current function).
 * \retval XME_STATUS_INVALID_PARAMETER if data is NULL.
 * \retval XME_STATUS_INTERNAL_ERROR in case of any other error.
 */
xme_status_t
xme_core_pnp_pnpClientComponentWrapper_readPortInLoginAcknowledgment
(
    const xme_core_topic_login_loginAcknowledgment_t* data
);

/**
 * \brief Read data from port 'inGraph'.
 *
 * \param[out] data User provided storage, to which the data is copied.
 *
 * \retval XME_STATUS_SUCCESS if reading was successful.
 * \retval XME_STATUS_NO_SUCH_VALUE when there is now new data on this port
 *         (only possible when this port is an optional port of the current function).
 * \retval XME_STATUS_INVALID_PARAMETER if data is NULL.
 * \retval XME_STATUS_INTERNAL_ERROR in case of any other error.
 */
xme_status_t
xme_core_pnp_pnpClientComponentWrapper_readPortInGraph
(
    const xme_core_topic_pnpManager_runtime_graph_model_t* data
);

/**
 * \brief Write data to port 'outManifest'.
 *
 * \note The write operation is only allowed to be called once per
 *       data packet sending process. A data packet is sent 
 *       as soon as the xme_core_pnp_pnpClientComponentWrapper_writeNextPacket()
 *       function is being called or when the step function
 *       returns and data have been written.
 * 
 * \param[in] data User provided storage, from which the data is copied.
 *            When NULL no data will be written to the port (this
 *            is also treated as  success).
 *
 * \retval XME_STATUS_SUCCESS if operation was successful.
 */
xme_status_t
xme_core_pnp_pnpClientComponentWrapper_writePortOutManifest
(
    const xme_core_topic_pnp_componentInstanceManifest_t* const data
);

/**
 * \brief Write data to port 'outLogoutAcknowledgment'.
 *
 * \note The write operation is only allowed to be called once per
 *       data packet sending process. A data packet is sent 
 *       as soon as the xme_core_pnp_pnpClientComponentWrapper_writeNextPacket()
 *       function is being called or when the step function
 *       returns and data have been written.
 * 
 * \param[in] data User provided storage, from which the data is copied.
 *            When NULL no data will be written to the port (this
 *            is also treated as  success).
 *
 * \retval XME_STATUS_SUCCESS if operation was successful.
 */
xme_status_t
xme_core_pnp_pnpClientComponentWrapper_writePortOutLogoutAcknowledgment
(
    const xme_core_topic_pnp_logoutAcknowledgment_t* const data
);

/**
 * \brief Write data to port 'outLogoutRequest'.
 *
 * \note The write operation is only allowed to be called once per
 *       data packet sending process. A data packet is sent 
 *       as soon as the xme_core_pnp_pnpClientComponentWrapper_writeNextPacket()
 *       function is being called or when the step function
 *       returns and data have been written.
 * 
 * \param[in] data User provided storage, from which the data is copied.
 *            When NULL no data will be written to the port (this
 *            is also treated as  success).
 *
 * \retval XME_STATUS_SUCCESS if operation was successful.
 */
xme_status_t
xme_core_pnp_pnpClientComponentWrapper_writePortOutLogoutRequest
(
    const xme_core_topic_pnp_logoutRequest_t* const data
);

/**
 * \brief Write data to port 'outRemoveComponentRequest'.
 *
 * \note The write operation is only allowed to be called once per
 *       data packet sending process. A data packet is sent 
 *       as soon as the xme_core_pnp_pnpClientComponentWrapper_writeNextPacket()
 *       function is being called or when the step function
 *       returns and data have been written.
 * 
 * \param[in] data User provided storage, from which the data is copied.
 *            When NULL no data will be written to the port (this
 *            is also treated as  success).
 *
 * \retval XME_STATUS_SUCCESS if operation was successful.
 */
xme_status_t
xme_core_pnp_pnpClientComponentWrapper_writePortOutRemoveComponentRequest
(
    const xme_core_topic_pnp_removeComponentRequest_t* const data
);

xme_status_t
xme_core_pnp_pnpClientComponentWrapper_readInputPortAttribute
(
    xme_core_pnp_pnpClientComponentWrapper_internalPortId_t portId,
    xme_core_attribute_key_t attributeKey,
    void* const buffer,
    uint32_t bufferSize
);

xme_status_t
xme_core_pnp_pnpClientComponentWrapper_writeOutputPortAttribute
(
    xme_core_pnp_pnpClientComponentWrapper_internalPortId_t portId,
    xme_core_attribute_key_t attributeKey,
    const void* const buffer,
    uint32_t bufferSize
);

xme_status_t
xme_core_pnp_pnpClientComponentWrapper_readNextPacket
(
    xme_core_pnp_pnpClientComponentWrapper_internalPortId_t portId
);

xme_status_t
xme_core_pnp_pnpClientComponentWrapper_writeNextPacket
(
    xme_core_pnp_pnpClientComponentWrapper_internalPortId_t portId
);


XME_EXTERN_C_END

#endif // #ifndef XME_CORE_PNP_PNPCLIENTCOMPONENTWRAPPER_H
