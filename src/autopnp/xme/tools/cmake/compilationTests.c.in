/*
 * Copyright (c) 2011-2013, fortiss GmbH.
 * Licensed under the Apache License, Version 2.0.
 *
 * Use, modification and distribution are subject to the terms specified
 * in the accompanying license file LICENSE.txt located at the root directory
 * of this software distribution. A copy is available at
 * http://chromosome.fortiss.org/.
 *
 * This file is part of CHROMOSOME.
 *
 */

/**
 * \file
 * \brief  Compilation tests.
 * \detail The code in these files is not meant to be functional. Instead,
 *         they serve for testing whether certain code snippets compile or
 *         not. This allows to test the effectiveness of certain API
 *         restrictions (keywords: deprecation, xme_fallback), for example.
 */

/*
 * NOTE: GENERATED FILE -- DO NOT EDIT!
 *       Edit the template in tools/cmake/compilationTests.c.in instead
 *       and re-run CMake to pick up the changes.
 */

/******************************************************************************/
/***   Includes                                                             ***/
/******************************************************************************/
#include "xme/defines.h"

/******************************************************************************/
/***   Defines                                                              ***/
/******************************************************************************/

//----------------------------------------------------------------------------//
//     Generic                                                                //
//----------------------------------------------------------------------------//

/**
 * \def    PASS
 *
 * \brief  Constant for expecting compilation to pass.
 *
 * \detail Used in conjunction with the ::XME_COMPILATIONTEST_EXPECT define.
 */
#define PASS 0

/**
 * \def    FAIL
 *
 * \brief  Constant for expecting compilation to fail.
 *
 * \detail Used in conjunction with the ::XME_COMPILATIONTEST_EXPECT define.
 */
#define FAIL 1

/**
 * \def    BSZ
 *
 * \brief  Size of buffers used in the compilation tests.
 */
#define BSZ 16

//----------------------------------------------------------------------------//
//     Test cases                                                             //
//----------------------------------------------------------------------------//

// The following defines are automatically generated
// from the compilation test specification
@XME_COMPILATIONTEST_TESTCASE_DEFINES@
// The following array is automatically generated
// from the compilation test specification
const char* compilationTestcaseNames[] =
{
@XME_COMPILATIONTEST_TESTCASE_NAMES@};

/******************************************************************************/
/***   Implementation                                                       ***/
/******************************************************************************/

/**
 * \brief  Dummy function for compilation test.
 *
 * \detail This function is not meant to do anything useful when called.
 *         It just serves for compilation testing.
 *         This function is a variable-argument function in order to be able
 *         to use a va_list variable inside it for testing.
 *
 * \param  lastFormatParam Just a formal parameter that serves as a marker for
 *         the va_list.
 * \param  ... Ignored parameters.
 *
 * \return Nothing meaningful really.
 */
int
doIt
(
    int lastFormalParam,
    ...
);

int
doIt
(
    int lastFormalParam,
    ...
)
{
    // Some variables that code below can use
    int i = 0;
    char buf[BSZ] = { 0 };
    wchar_t wbuf[BSZ] = { 0 };
    unsigned char mbbuf[BSZ] = { 0 };
    void* ptr = NULL;
    va_list args;
    const char* str = "Test";
    const wchar_t* wstr = L"Test";
    const unsigned char* mbstr = (unsigned char*) "Test";

    // Ensure all variables are initialized
    va_start(args, lastFormalParam);

    // Ensure that PASS and FAIL defines are not reported as unused.
    // They are required to replace the value of the XME_COMPILATIONTEST_EXPECT
    // definition to a numeric value for comparison.
#if PASS == FAIL
#endif

// The following tests are automatically generated
// from the compilation test specification
#if 0
@XME_COMPILATIONTEST_TESTCASE_IMPLEMENTATIONS@
#else
    // We found an unhandled compilation test (i.e., someone passed a compilation
    // test name that is not implemented here). Cause an unexpected result (i.e.,
    // the opposite of what is expected) such that the respective test breaks.
    #if XME_COMPILATIONTEST_EXPECT == FAIL
        // This will force compilation to pass
    #else
        // This will force compilation to fail
        #error Attempt to run a compilation test for which no TEST_ define has been added!
    #endif
#endif

    // For the sake of clean coding...
    va_end(args);

    // Some arbitrary expression to avoid unused variables
    return buf[i] + (0 != wbuf[0] ? 1 : 0) + mbbuf[0] + (NULL != ptr ? 1 : 0) +
        (0 != str[0] ? 1 : 0) + (0 != wstr[0] ? 1 : 0) + (0 != mbstr[0] ? 1 : 0);
}

/**
 * \brief  Main entry point.
 *
 * \return Always zero.
 */
int main(void)
{
    xme_fallback_printf("This executable is not meant to be functional.\n");
    xme_fallback_printf("It serves for testing whether certain code snippets compile or not.\n");
    xme_fallback_printf("As such, the behavior of this executable is undefined; it might even crash.\n");
    xme_fallback_printf("Current compilation test: %s\n", compilationTestcaseNames[(XME_COMPILATIONTEST_RUN)-1]);

    (void)doIt(1);

    return 0;
}
