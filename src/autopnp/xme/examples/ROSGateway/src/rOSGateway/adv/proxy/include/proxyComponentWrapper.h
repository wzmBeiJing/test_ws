/*
 * Copyright (c) 2011-2014, fortiss GmbH.
 * Licensed under the Apache License, Version 2.0.
 *
 * Use, modification and distribution are subject to the terms specified
 * in the accompanying license file LICENSE.txt located at the root directory
 * of this software distribution. A copy is available at
 * http://chromosome.fortiss.org/.
 *
 * This file is part of CHROMOSOME.
 *
 * $Id: proxyComponentWrapper.h 7840 2014-03-14 13:17:45Z kainz $
 */

/**
 * \file
 *         Component wrapper - implements interface of a component
 *              to the data handler
 *
 * \author
 *         This file has been generated by the CHROMOSOME Modeling Tool (XMT)
 *         (fortiss GmbH).
 */

#ifndef ROSGATEWAY_ADV_PROXY_PROXYCOMPONENTWRAPPER_H
#define ROSGATEWAY_ADV_PROXY_PROXYCOMPONENTWRAPPER_H

/******************************************************************************/
/***   Includes                                                             ***/
/******************************************************************************/
#include "xme/core/executionManager/include/executionManagerDataStructures.h"

#include "rOSGateway/topic/dictionaryData.h"

/******************************************************************************/
/***   Type definitions                                                     ***/
/******************************************************************************/

/**
 * \enum rOSGateway_adv_proxy_proxyComponentWrapper_internalFunctionId_e
 *
 * \brief Values for identifying functions of proxy component.
 */
enum rOSGateway_adv_proxy_proxyComponentWrapper_internalFunctionId_e
{
    ROSGATEWAY_ADV_PROXY_PROXYCOMPONENTWRAPPER_FUNCTION_RECEIVEMESSAGE = 0, ///< Function 'receiveMessage'
    ROSGATEWAY_ADV_PROXY_PROXYCOMPONENTWRAPPER_FUNCTION_ASKSUM = 1, ///< Function 'askSum'
    ROSGATEWAY_ADV_PROXY_PROXYCOMPONENTWRAPPER_FUNCTION_RECEIVESUM = 2, ///< Function 'receiveSum'
    ROSGATEWAY_ADV_PROXY_PROXYCOMPONENTWRAPPER_FUNCTION_GETDIFFERENCE = 3  ///< Function 'getDifference'
};

/**
 * \enum rOSGateway_adv_proxy_proxyComponentWrapper_internalPortId_e
 *
 * \brief Values for rOSGateway_adv_proxy_proxyComponentWrapper_internalPortId_t.
 */
enum rOSGateway_adv_proxy_proxyComponentWrapper_internalPortId_e
{
    ROSGATEWAY_ADV_PROXY_PROXYCOMPONENTWRAPPER_PORT_MESSAGE = 0, ///< Port 'message'
    ROSGATEWAY_ADV_PROXY_PROXYCOMPONENTWRAPPER_PORT_RECEIVEDSUM = 1, ///< Port 'receivedSum'
    ROSGATEWAY_ADV_PROXY_PROXYCOMPONENTWRAPPER_PORT_GETDIFFERENCE = 2, ///< Port 'getDifference'
    ROSGATEWAY_ADV_PROXY_PROXYCOMPONENTWRAPPER_PORT_RECEIVEDMESSAGE = 3, ///< Port 'receivedMessage'
    ROSGATEWAY_ADV_PROXY_PROXYCOMPONENTWRAPPER_PORT_GETSUM = 4, ///< Port 'getSum'
    ROSGATEWAY_ADV_PROXY_PROXYCOMPONENTWRAPPER_PORT_SENDDIFFERENCE = 5  ///< Port 'sendDifference'
};

/**
 * \typedef rOSGateway_adv_proxy_proxyComponentWrapper_internalPortId_t
 *
 * \brief Defines internal port ids of component 'proxy'.
 *
 * \details These can be used when calling the rOSGateway_adv_proxy_proxyComponentWrapper_receivePort function.
 *          For the definition of possible values, see enum rOSGateway_adv_proxy_proxyComponentWrapper_internalPortId_e.
 */
typedef uint8_t rOSGateway_adv_proxy_proxyComponentWrapper_internalPortId_t;

/******************************************************************************/
/***   Prototypes                                                           ***/
/******************************************************************************/
XME_EXTERN_C_BEGIN

/**
 * \brief Initializes this component wrapper.
 *
 * \retval XME_STATUS_SUCCESS on success.
 */
xme_status_t
rOSGateway_adv_proxy_proxyComponentWrapper_init(void);

/**
 * \brief Finalizes this component wrapper.
 */
void
rOSGateway_adv_proxy_proxyComponentWrapper_fini(void);

/**
 * \brief Associate an internal port number with the corresponding port handle.
 *        For the ids of the individual ports, see the definition of rOSGateway_adv_proxy_proxyComponentWrapper_internalPortId_t.
 *
 * \param dataPacketId Port handle from the dataHandler.
 * \param componentInternalPortId Component internal port number of the above port.
 *
 * \retval XME_STATUS_SUCCESS if no problems occurred.
 * \retval XME_STATUS_INVALID_PARAMETER if componentInternalPortId is unknown.
 */
xme_status_t
rOSGateway_adv_proxy_proxyComponentWrapper_receivePort
(
    xme_core_dataManager_dataPacketId_t dataPacketId,
    rOSGateway_adv_proxy_proxyComponentWrapper_internalPortId_t componentInternalPortId
);

/**
 * \brief This function is called by the function wrapper after the step
 *        function has been called. It signals to the middleware that all
 *        input ports have been read.
 */
void
rOSGateway_adv_proxy_proxyComponentWrapper_completeReadOperations(void);

/**
 * \brief This function is called by the function wrapper after the step
 *        function has been called. It signals to the middleware that all
 *        write operations on ports that actually have been written to
 *        in the step function (via the functions in this component wrapper)
 *        are now completed.
 */
void
rOSGateway_adv_proxy_proxyComponentWrapper_completeWriteOperations(void);

/**
 * \brief Read data from port 'message'.
 *
 * \param[out] data User provided storage, to which the data is copied.
 *
 * \retval XME_STATUS_SUCCESS if reading was successful.
 * \retval XME_STATUS_NO_SUCH_VALUE when there is now new data on this port
 *         (only possible when this port is an optional port of the current function).
 * \retval XME_STATUS_INVALID_PARAMETER if data is NULL.
 * \retval XME_STATUS_INTERNAL_ERROR in case of any other error.
 */
xme_status_t
rOSGateway_adv_proxy_proxyComponentWrapper_readPortMessage
(
    const ROSGateway_topic_message_t* data
);

/**
 * \brief Read data from port 'receivedSum'.
 *
 * \param[out] data User provided storage, to which the data is copied.
 *
 * \retval XME_STATUS_SUCCESS if reading was successful.
 * \retval XME_STATUS_NO_SUCH_VALUE when there is now new data on this port
 *         (only possible when this port is an optional port of the current function).
 * \retval XME_STATUS_INVALID_PARAMETER if data is NULL.
 * \retval XME_STATUS_INTERNAL_ERROR in case of any other error.
 */
xme_status_t
rOSGateway_adv_proxy_proxyComponentWrapper_readPortReceivedSum
(
    const ROSGateway_topic_sumResponse_t* data
);

/**
 * \brief Read data from request handler port 'getDifference'.
 *
 * \param[out] data User provided storage, to which the data is copied.
 * \param[out] requestDataHandle Handle for the request. Must be passed
 *             to the corresponding rOSGateway_adv_proxy_proxyComponentWrapper_writeResponseSenderPortGetDifference
 *             call. This is necessary to correlate request and response message.
 *             Do not modify this value manually.
 *
 * \retval XME_STATUS_SUCCESS if reading was successful.
 * \retval XME_STATUS_NO_SUCH_VALUE when there is now new data on this port
 *         (only possible when this port is an optional port of the current function).
 * \retval XME_STATUS_INVALID_PARAMETER if data is NULL, or requestDataHandle is NULL.
 * \retval XME_STATUS_INTERNAL_ERROR in case of any other error.
 */
xme_status_t
rOSGateway_adv_proxy_proxyComponentWrapper_readRequestHandlerPortGetDifference
(
    const ROSGateway_topic_differenceRequest_t* data,
    const xme_core_component_requestDataHandle_t* requestDataHandle
);

/**
 * \brief Write data to port 'receivedMessage'.
 *
 * \note The write operation is only allowed to be called once per
 *       data packet sending process. A data packet is sent 
 *       as soon as the rOSGateway_adv_proxy_proxyComponentWrapper_writeNextPacket()
 *       function is being called or when the step function
 *       returns and data have been written.
 * 
 * \param[in] data User provided storage, from which the data is copied.
 *            When NULL no data will be written to the port (this
 *            is also treated as  success).
 *
 * \retval XME_STATUS_SUCCESS if operation was successful.
 */
xme_status_t
rOSGateway_adv_proxy_proxyComponentWrapper_writePortReceivedMessage
(
    const ROSGateway_topic_status_t* const data
);

/**
 * \brief Write data to port 'getSum'.
 *
 * \note The write operation is only allowed to be called once per
 *       data packet sending process. A data packet is sent 
 *       as soon as the rOSGateway_adv_proxy_proxyComponentWrapper_writeNextPacket()
 *       function is being called or when the step function
 *       returns and data have been written.
 * 
 * \param[in] data User provided storage, from which the data is copied.
 *            When NULL no data will be written to the port (this
 *            is also treated as  success).
 *
 * \retval XME_STATUS_SUCCESS if operation was successful.
 */
xme_status_t
rOSGateway_adv_proxy_proxyComponentWrapper_writePortGetSum
(
    const ROSGateway_topic_sumRequest_t* const data
);

/**
 * \brief Write data to response sender port 'sendDifference'.
 *
 * \param[in] data User provided storage, from which the data is copied.
 *            When NULL no data will be written to the port (this
 *            is also treated as  success).
 * \param[in] Request handle from corresponding call to rOSGateway_adv_proxy_proxyComponentWrapper_readRequestHandlerPortSendDifference.
 *
 * \retval XME_STATUS_SUCCESS if operation was successful.
 * \retval XME_STATUS_INVALID_PARAMETER if requestDataHandle is NULL.
 */
xme_status_t
rOSGateway_adv_proxy_proxyComponentWrapper_writeResponseSenderPortSendDifference
(
    const ROSGateway_topic_differenceResponse_t* const data,
    const xme_core_component_requestDataHandle_t* const requestDataHandle
);

xme_status_t
rOSGateway_adv_proxy_proxyComponentWrapper_readInputPortAttribute
(
    rOSGateway_adv_proxy_proxyComponentWrapper_internalPortId_t portId,
    xme_core_attribute_key_t attributeKey,
    void* const buffer,
    uint32_t bufferSize
);

xme_status_t
rOSGateway_adv_proxy_proxyComponentWrapper_writeOutputPortAttribute
(
    rOSGateway_adv_proxy_proxyComponentWrapper_internalPortId_t portId,
    xme_core_attribute_key_t attributeKey,
    const void* const buffer,
    uint32_t bufferSize
);

xme_status_t
rOSGateway_adv_proxy_proxyComponentWrapper_readNextPacket
(
    rOSGateway_adv_proxy_proxyComponentWrapper_internalPortId_t portId
);

xme_status_t
rOSGateway_adv_proxy_proxyComponentWrapper_writeNextPacket
(
    rOSGateway_adv_proxy_proxyComponentWrapper_internalPortId_t portId
);


XME_EXTERN_C_END

#endif // #ifndef ROSGATEWAY_ADV_PROXY_PROXYCOMPONENTWRAPPER_H
